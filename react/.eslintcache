[{"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/index.js":"1","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/services/socket.js":"2","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/App.js":"3","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/reportWebVitals.js":"4","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/page/linked-list/linked-list-view.js":"5","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/page/node-adder/node-adder.js":"6","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/page/linked-list/linked-list.js":"7","/home/amod/Documents/xboost/DayX/node-socket/react/src/index.js":"8","/home/amod/Documents/xboost/DayX/node-socket/react/src/services/socket.js":"9","/home/amod/Documents/xboost/DayX/node-socket/react/src/App.js":"10","/home/amod/Documents/xboost/DayX/node-socket/react/src/reportWebVitals.js":"11","/home/amod/Documents/xboost/DayX/node-socket/react/src/page/linked-list/linked-list-view.js":"12","/home/amod/Documents/xboost/DayX/node-socket/react/src/page/addNode/addNode.js":"13","/home/amod/Documents/xboost/DayX/node-socket/react/src/libs/linked-list.js":"14","/home/amod/Documents/xboost/DayX/node-socket/react/src/page/linked-list/linkedLIsts.js":"15"},{"size":559,"mtime":1608813773551,"results":"16","hashOfConfig":"17"},{"size":153,"mtime":1608813640537,"results":"18","hashOfConfig":"17"},{"size":670,"mtime":1608813735692,"results":"19","hashOfConfig":"17"},{"size":362,"mtime":1608813321549,"results":"20","hashOfConfig":"17"},{"size":1768,"mtime":1608821257179,"results":"21","hashOfConfig":"17"},{"size":1567,"mtime":1608821384233,"results":"22","hashOfConfig":"17"},{"size":566,"mtime":1608813606377,"results":"23","hashOfConfig":"17"},{"size":559,"mtime":1608823222658,"results":"24","hashOfConfig":"25"},{"size":153,"mtime":1608823222662,"results":"26","hashOfConfig":"25"},{"size":650,"mtime":1608901277320,"results":"27","hashOfConfig":"25"},{"size":362,"mtime":1608823222662,"results":"28","hashOfConfig":"25"},{"size":1194,"mtime":1608903867716,"results":"29","hashOfConfig":"25"},{"size":2164,"mtime":1608895289506,"results":"30","hashOfConfig":"25"},{"size":2229,"mtime":1608915970682,"results":"31","hashOfConfig":"25"},{"size":4272,"mtime":1608920912952,"results":"32","hashOfConfig":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"n4q2m9",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1wlv5ib",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/index.js",[],["68","69"],"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/services/socket.js",[],"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/App.js",[],"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/reportWebVitals.js",[],"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/page/linked-list/linked-list-view.js",["70"],"import React from 'react';\nimport linkedList from './linked-list.js';\nimport css from './linked-list-view.module.css';\n\n\nclass LinkedListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: []\n        }\n        this.list = new linkedList();\n    }\n\n    componentDidMount() {\n        //listens to push in the socket\n        this.props.socket.on('node', (value) => {\n            this.list.push(value);\n            this.updateList();\n        })\n    }\n\n    //updates the linked list after a node is pushed\n    updateList() {\n        let lastNode = this.list.tail;\n        this.setState({\n            nodes: [...this.state.nodes, { value: lastNode.value, bgColor: this.generateRandomColor() }]\n        });\n    }\n\n    //returns UI component for Head arrow\n    headArrow() {\n        return this.state.nodes.length ? <div className={css.head}>\n            Head\n        <img alt=\"head_arrow\" className=\"img img-fluid\" src=\"right-arrow.svg\"></img>\n        </div> : null;\n    }\n\n    //generates random color for the node\n    generateRandomColor() {\n        let hexString = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += hexString[Math.floor(Math.random() * hexString.length)];\n        }\n        return color;\n    }\n    render() {\n        return (\n            <div className=\"container\" className={css.node_container}>\n                <h5>Linked List</h5>\n                {this.headArrow()}\n                {this.state.nodes.map((node, index) => {\n                    return <div className={css.node} style={{ background: node.bgColor }} key={index}>{node.value}</div>\n                })}\n            </div>\n        )\n    }\n}\nexport default LinkedListView; ","/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/page/node-adder/node-adder.js",[],"/home/amod/Documents/xboost/DayX/react-socket-1/socket-react/src/page/linked-list/linked-list.js",[],"/home/amod/Documents/xboost/DayX/node-socket/react/src/index.js",[],["71","72"],"/home/amod/Documents/xboost/DayX/node-socket/react/src/services/socket.js",[],"/home/amod/Documents/xboost/DayX/node-socket/react/src/App.js",[],"/home/amod/Documents/xboost/DayX/node-socket/react/src/reportWebVitals.js",[],"/home/amod/Documents/xboost/DayX/node-socket/react/src/page/linked-list/linked-list-view.js",[],"/home/amod/Documents/xboost/DayX/node-socket/react/src/page/addNode/addNode.js",["73"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toastr } from 'toastr';\nlet Style = {\n    cardBody: {\n        boxShadow: \"7px 6px 8px #d0cdcd\",\n        borderRadius: \"11px\",\n        padding: \"15px\",\n        border: \"1px solid #efefef\"\n    },\n    card: {\n        width: \"350px\"\n    },\n    input: {\n        padding: \"10px\",\n        borderRadius: \"5px\",\n        border: \"1px solid #d6d4d4\"\n    },\n    btn: {\n        margin: \"10px\",\n        padding: \"10px 20px\",\n        background: \"#67a5ca\",\n        border: \"0px\",\n        color: \"#fff\",\n        borderRadius: \"6px\",\n        fontWeight: \"600\",\n        cursor: \"pointer\"\n    }\n};\nclass AddNode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodeValue: '',\n            listId: -1\n        }\n    }\n\n    componentDidMount() {\n     \n    }\n\n    inputHandler() {\n        this.props.socket.emit('nodeValue', JSON.stringify({ id: this.state.listId, value: this.state.nodeValue }));\n    }\n\n    //updates the value of node \n    updateNodeValueInput(e) {\n        this.setState({ nodeValue: e.target.value });\n    }\n\n    //updates the value of listid\n    updateListIdInput(e) {\n        this.setState({ listId: e.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to={\"/linkedlist\"} target=\"_blank\" style={{ fontSize: \"20px\" }}> Linked List</Link>\n                <div style={Style.card}>\n                    <div style={Style.cardBody}>\n                        <h3>Add a Node</h3>\n                        <label for=\"listId\">Linklist Id</label>\n                        <input type=\"text\" name=\"listId\" style={Style.input} onChange={this.updateListIdInput.bind(this)}></input>\n\n                        <label for=\"nodeValue\">Node Value</label>\n                        <input type=\"text\" name=\"nodeValue\" style={Style.input} onChange={this.updateNodeValueInput.bind(this)}></input>\n                        <button style={Style.btn} onClick={this.inputHandler.bind(this)}>Add</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddNode; ","/home/amod/Documents/xboost/DayX/node-socket/react/src/libs/linked-list.js",[],"/home/amod/Documents/xboost/DayX/node-socket/react/src/page/linked-list/linkedLIsts.js",["74","75","76"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport toastr from 'toastr';\n\nimport LinkedList from '../../libs/linked-list';\nimport LinkedListView from './linked-list-view';\nimport css from './linkedLists.module.css';\n\nclass LinkedLists extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            linkedLists: [],\n            nodesArray: {},\n            examCenterLists: {\n                lists: [],\n                nodes: {}\n            },\n        }\n    }\n\n    //creates a new linked list \n    createLinkedList = () => {\n        let linkedList = new LinkedList();\n        this.setState({ linkedLists: [...this.state.linkedLists, linkedList] });\n    }\n\n    //generates random color for the node\n    generateRandomColor() {\n        let hexString = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += hexString[Math.floor(Math.random() * hexString.length)];\n        }\n        return color;\n    }\n\n    componentDidMount = () => {\n        //listens to push in the socket\n        this.props.socket.on('node', (nodeData) => {\n            nodeData = JSON.parse(nodeData);\n            //map linkedlists with the nodes\n            if (this.state.linkedLists[nodeData.id]) {\n                //getting array of nodes of linkedlist with id => nodeData.id\n                let listNodeArray = this.state.nodesArray[nodeData.id];\n                listNodeArray = listNodeArray ? [...listNodeArray, { value: nodeData.value, bgColor: this.generateRandomColor() }] : [{ value: nodeData.value, bgColor: this.generateRandomColor() }];\n                //updating array in the state\n                this.state.nodesArray[nodeData.id] = listNodeArray;\n\n                //updating the linked list \n                this.state.linkedLists[nodeData.id].push(nodeData.value);\n                this.setState({ nodesArray: this.state.nodesArray, linkedLists: this.state.linkedLists });\n            }\n        });\n    }\n\n    createExamCenter = () => {\n        if (this.state.linkedLists.length) {\n            let examCenter = new LinkedList();\n            examCenter.head = this.state.linkedLists[0].head;\n            examCenter.tail = this.state.linkedLists[0].tail;\n            examCenter.length = this.state.linkedLists[0].length;\n            for (let i = 1; i < this.state.linkedLists.length; i++) {\n                examCenter.tail.next = this.state.linkedLists[i].head;\n                examCenter.tail = this.state.linkedLists[i].tail;\n                examCenter.length += this.state.linkedLists[i].length;\n            }\n            this.shuffleList(examCenter);\n        } else {\n            //show error\n            // toastr.error('No linkedlists present!');\n        }\n    }\n\n    shuffleList = (list) => {\n        let noOfExamCenters = this.state.linkedLists.length;\n        let examCenter = new LinkedList();\n\n        while (list.length !== 0 || list.head !== null) {\n            let randomIndex = Math.floor(Math.random() * (list.length - 1));\n            let deletedNode = list.deleteAtindex(randomIndex);\n            if (deletedNode) {\n                examCenter.push(deletedNode.value);\n            }\n        }\n        let breakPtIndex = Math.floor(examCenter / noOfExamCenters);\n        let currentNode = examCenter.head;\n        for (let i = 1; i <= examCenter.length; i++) {\n            currentNode = currentNode.next;\n            if (i % breakPtIndex === 0) {\n                // currentNode\n            }\n        }\n    }\n\n    render = () => {\n        return (\n            <div className={css.node_container + \" container\"}>\n                <h5>Linked List</h5>\n                <p>No of Linked lists: {this.state.linkedLists.length}</p>\n                <button className=\"btn btn-primary\" onClick={this.createLinkedList}>Create a list</button>\n                <button className=\"btn btn-primary\" onClick={this.createExamCenter}>Generate Exam Centers</button>\n                {this.state.linkedLists.map((list, index) => {\n                    return <LinkedListView key={index} list={list} listIndex={index} nodes={this.state.nodesArray[index] ? this.state.nodesArray[index] : []} />\n                })}\n            </div>\n        )\n    }\n}\n\nexport default LinkedLists;",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":50,"column":40,"nodeType":"83","endLine":50,"endColumn":70},{"ruleId":"77","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":49,"column":17,"nodeType":"93","endLine":49,"endColumn":38},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["94"],["95"],"no-unused-vars","'toastr' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]